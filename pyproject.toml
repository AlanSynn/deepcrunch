# Copyright LG U+ CDO MLOps Team.
# DeepCrunch: An automated library for practical and efficient deep learning model compression.
# This project is developed by Alan Synn (alan@alansynn.com) as a part of LG U+ Global Summer Internship.

[metadata]
name = "DeepCrunch"
author = "Alan Synn <alan@alansynn.com>"
url = "https://github.com/AlanSynn/DeepCrunch"

[build-system]
requires = [
    "setuptools",
    "wheel",
]

[tool.isort]
known_first_party = [
    "deepcrunch",
    "examples",
    "tests"
]
profile = "black"
line_length = 120
force_sort_within_sections = "False"
order_by_type = "False"
skip = ["notebooks"]

[tool.black]
line-length = 120
exclude = '(notebooks/.*)'

[tool.ruff]
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E", "W",  # see: https://pypi.org/project/pycodestyle
    "F",  # see: https://pypi.org/project/pyflakes
    "S",  # see: https://pypi.org/project/flake8-bandit
]

extend-select = [
    "C4",  # see: https://pypi.org/project/flake8-comprehensions
    "SIM",  # see: https://pypi.org/project/flake8-simplify
    "RET",  # see: https://pypi.org/project/flake8-return
    "PT",  # see: https://pypi.org/project/flake8-pytest-style
]
ignore = [
    "E731",  # Do not assign a lambda expression, use a def
    "S108",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    "docs",
    "_notebooks"
]
ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
".actions/*" = ["S101", "S310"]
"setup.py" = ["S101"]
"examples/**" = [
    "S101",  # Use of `assert` detected
    "S113",  # todo: Probable use of requests call without
    "S104",  # Possible binding to all interface
    "F821",  # Undefined name `...`
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S501",  # Probable use of `requests` call with `verify=False` disabling SSL certificate checks
    "S108",  # Probable insecure usage of temporary file or directory: "/tmp/data/MNIST"
]
"src/**" = [
    "S101",  # todo: Use of `assert` detected
    "S105", "S106", "S107",  # todo: Possible hardcoded password: ...
    "S113",  # todo: Probable use of requests call without timeout
    "S301",  # todo: `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S324",  # todo: Probable use of insecure hash functions in `hashlib`
    "S602",  # todo: `subprocess` call with `shell=True` identified, security issue
    "S603",  # todo: `subprocess` call: check for execution of untrusted input
    "S605",  # todo: Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without `shell`
    "S607",  # todo: Starting a process with a partial executable path
    "RET504",  # todo:Unnecessary variable assignment before `return` statement
    "RET503",
]
"tests/**" = [
    "S101",  # Use of `assert` detected
    "S105", "S106",  # todo: Possible hardcoded password: ...
    "S301",  # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S113",  # todo: Probable use of requests call without timeout
    "S311",  # todo: Standard pseudo-random generators are not suitable for cryptographic purposes
    "S108",  # todo: Probable insecure usage of temporary file or directory: "/tmp/sys-customizations-sync"
    "S602",  # todo: `subprocess` call with `shell=True` identified, security issue
    "S603",  # todo: `subprocess` call: check for execution of untrusted input
    "S605",  # todo: Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without `shell`
    "S607",  # todo: Starting a process with a partial executable path
    "RET504",  # todo:Unnecessary variable assignment before `return` statement
    "PT004",  # todo: Fixture `tmpdir_unittest_fixture` does not return anything, add leading underscore
    "PT011",  # todo: `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    "PT012",  # todo: `pytest.raises()` block should contain a single simple statement
    "PT019",  # todo: Fixture `_` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.mypy]
files = [
    "deepcrunch",
]
# This section is for files with "-" as they are not valid python modules
exclude = [
    "deepcrunch/__about__.py",
    "deepcrunch/__setup__.py",
    "deepcrunch/__version__.py",
    "deepcrunch/app/cli/app-template",
    "deepcrunch/app/cli/component-template",
    "deepcrunch/app/cli/pl-app-template",
]


install_types = "True"
non_interactive = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
show_error_codes = "True"
warn_redundant_casts = "True"
warn_unused_configs = "True"
warn_unused_ignores = "True"
allow_redefinition = "True"
# disable this rule as the Trainer attributes are defined in the connectors, not in its __init__
disable_error_code = "attr-defined"
# style choices
warn_no_return = "False"

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
# the list can be generated with:
# mypy --no-error-summary 2>&1 | tr ':' ' ' | awk '{print $1}' | sort | uniq | sed 's/\.py//g; s|src/||g;  s|\/|\.|g' | xargs -I {} echo '"{}",'
module = [
    "deepcrunch.app.api.http_methods",
    "deepcrunch.app.api.request_types",
    "deepcrunch.app.cli.cmd_install",
]
ignore_errors = "True"


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "warnings",
    "pass",
    "rank_zero_warn",
    "raise NotImplementedError",
]

[tool.pytest.ini_options]
norecursedirs = [
    ".git",
    ".github",
    "dist",
    "build",
    "docs",
]

addopts = [
    "--strict-markers",
    "--doctest-modules",
    "--color=yes",
    "--disable-pytest-warnings",
    "--ignore=legacy/checkpoints",
]
markers = [
    "cloud:Run the cloud tests for example",
]
filterwarnings = [
    "error::FutureWarning",
]
xfail_strict = true
junit_duration_report = "call"
